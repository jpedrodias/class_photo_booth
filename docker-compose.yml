# This is the docker-compose file for a Flask application.
services:
  flaskapp:
    container_name: ${FLASKAPP_NAME}
    command: >
      bash -c "
      echo 'Verificando Redis...';
      python worker.py --verify;
      if [ \$$? -eq 0 ]; then
        echo 'Redis está pronto!';
        echo 'Iniciando RQ worker em background...';
        python worker.py --forever &
        WORKER_PID=\$$!;
        echo \"RQ worker iniciado com PID: \$$WORKER_PID\";
        echo \"Running App: ${FLASKAPP_FILE}\";
        gunicorn -w 4 -b :5000 app:app;
        #python ${FLASKAPP_FILE};
      else
        echo 'Falha na verificação do Redis. Saindo...';
        exit 1;
      fi
      "
    restart: unless-stopped
    user: "${UID:-1000}:${GID:-1000}"
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./flaskapp/:/app
      - /etc/localtime:/etc/localtime:ro
    ports:
      - ${FLASKAPP_PORT}:5000
    env_file:
      - ./.env
      #- ./.env_flaskapp
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      TZ: ${TZ}
      FLASK_ENV: development  # Added environment variable for Flask environment


  postgres:
    restart: unless-stopped
    container_name: postgres_server
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - ./.env
      #- ./.env_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: ${TZ}
    ports:
      - 5432:5432
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 8081:8080
    depends_on:
      - postgres
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - default


  redis:
    image: redis:latest
    container_name: redis_server
    restart: unless-stopped
    command: >
      redis-server
      --save "86400 1"
      --appendonly no
      --dir /data
      --dbfilename dump.rdb
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    networks:
      - default

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDISINSIGHT_HOST=0.0.0.0
      - REDISINSIGHT_ACCEPT_LICENSE=true
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/data
    networks:
      - default


volumes:
  postgres_data:
  redis_data:
  redisinsight_data:

networks:
  default:
    name: flaskapps-network
    #external: true # uncomment this on production
    driver: bridge
